Introduction
============

This tool provides a Python interface to LIBLINEAR with instance weight support

Installation
============

Please check README for detail.

USAGE
=====

The usage is bascally the same as the version without supporting
instance weights. We only show differences below.

- Function: train

    There are three ways to call train()

    >>> model = train(W, y, x [, 'training_options'])
    >>> model = train(prob [, 'training_options'])
    >>> model = train(prob, param)

    W: a list/tuple of l training weights (type must be double). 
       Use [] if no weights.

    y: a list/tuple of l training labels (type must be int/double).

    x: a list/tuple of l training instances. The feature vector of
       each training instance is an instance of list/tuple or dictionary.

    training_options: a string in the same form as that for LIBLINEAR command
                      mode.

    prob: an problem instance generated by calling
          problem(W, y, x).

    param: an parameter instance generated by calling
           parameter('training_options')

    model: the returned model instance. See linear.h for details of this
           structure. If '-v' is specified, cross validation is
           conducted and the returned model is just a scalar: cross-validation
           accuracy for classification and mean-squared error for regression.

    To train the same data many times with different
    parameters, the second and the third ways should be faster..

    Examples:

	>>> from liblinearutil import *
	>>> y, x = svm_read_problem('../heart_scale')
	>>> W = [1] * len(y)
	>>> W[0] = 10
	>>> prob = problem(W, y, x)
	>>> param = parameter('-c 5')
	>>> m = train([], y, x, '-c 5')
	>>> m = train(W, y, x)
	>>> m = train(prob, param)
	>>> CV_ACC = train(W, y, x, '-v 3')

